import UIKit

/// `TouchManager` handles gesture recognition on iOS and forwards
/// events to the Go touch system via gomobile bindings.
/// The right side is prepared for future gameplay actions.
class TouchManager: UIView {
    var handler: MobileTouchHandler?

    func configure(handler: MobileTouchHandler) {
        self.handler = handler
        let directions: [UISwipeGestureRecognizer.Direction] = [.up, .down, .left, .right]
        for dir in directions {
            let recognizer = UISwipeGestureRecognizer(target: self, action: #selector(handleSwipe(_:)))
            recognizer.direction = dir
            addGestureRecognizer(recognizer)
        }
    }

    @objc private func handleSwipe(_ gesture: UISwipeGestureRecognizer) {
        switch gesture.direction {
        case .left: handler?.startMoving(.left)
        case .right: handler?.startMoving(.right)
        case .up: handler?.startMoving(.up)
        case .down: handler?.startMoving(.down)
        default: break
        }
    }

    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        handler?.stopMoving()
    }
}

/// Protocol generated by gomobile to communicate with Go code.
@objc protocol MobileTouchHandler {
    func startMoving(_ dir: SwipeDirection)
    func stopMoving()
}

/// Enum mirroring the SwipeDirection constants from Go.
@objc enum SwipeDirection: Int32 {
    case none = 0
    case left
    case right
    case up
    case down
}
